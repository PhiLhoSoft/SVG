Generation of SVG graphicsBasically, there is two ways to generate a SVG graphic:static generation or dynamic one.Static generationIt can be done by a program made in whatever language able to build stringsand output them (to standard output or to a file, for example).This program may always output the same graphic, or more likely can use datato customize the output.Data can be hardcoded in the program (needs a compilation if the language iscompiled, more flexible with interpreted languages), can be more or less random,can be read from an external source (flat file, database, etc.) or can be inputinteractively by the user: asking questions on the command line, or using agraphical interface to modify data.Advantages:- You can use whatever language you already master: fast start.- Once the graphic is generated, it can be used as is:included or pasted in another graphic, changed by hand, etc.- It takes little more work to output the graphic to another vector format(raytracer, Cad, etc.).- It can even output the graphic to a display device, using a 2D API(Java2D, GDI, OpenGL, DirectDraw, etc.).Drawbacks:- You need a compiler or an interpreter.The generator may not work on your system.- The generated file can be quite big.Dynamic generationImage elements are created or modified from the inside of the SVG, usingECMAScript (aka. JavaScript) manipulating the Dom of the SVG document.Advantages:- It is self-sufficient: No need for a compiler or interpreter.It is also portable: it works wherever a SVG viewer is available.- It may be smaller, although it depends on the size of the code...Drawbacks:- It can be quite slow to generate the graphic.- It has to be generated each time the file is loaded.- It is hard to reuse the generated graphic in another file.- It can eat a lot of memory.- You have to know JavaScript and to learn the Dom applied to SVG.